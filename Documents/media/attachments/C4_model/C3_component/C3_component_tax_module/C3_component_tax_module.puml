@startuml PineConePro_ERPIMS_C3_TaxModule
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

' Actors
Person(accountant, "Accountant", "Manages tax settings, runs filing reports")
Person(owner, "Owner / GM", "Approves tax filings, views reports")

' System Boundary
Container_Boundary(taxBoundary, "Tax & Reporting Module") {
  Component(taxController, "TaxController", "ASP.NET Core", "REST endpoints for tax calculations and reporting")
  Component(taxAppService, "TaxApplicationService", "Application Layer", "Orchestrates tax calculation and reporting workflows")
  Component(taxEventHandler, "TaxEventHandler", "Event Subscriber", "Subscribes to events like orders.order-shipped to finalize tax transactions")

  Component(taxCalculator, "TaxCalculationService", "Domain Service", "Computes jurisdictional tax based on address, product taxability, and exemptions")
  Component(exemptionService, "ExemptionService", "Domain Service", "Manages customer tax exemption certificates")
  Component(hazmatFeeService, "HazmatFeeService", "Domain Service", "Calculates special taxes or fees for hazardous materials")
  Component(reportingService, "TaxReportingService", "Domain Service", "Generates and exports tax liability reports for filing")

  Component(taxTransactionAggregate, "TaxTransaction Aggregate", "Domain Model", "Captures tax details for a sale, including rates, amounts, and filing status")
  
  Component(taxRepository, "TaxRepository", "EF Core Repository", "Persists tax transactions and exemption certificates")
  Component(taxReadModel, "TaxReadModel", "CQRS Read Store", "Provides materialized views for tax liability reports")
  
  Component(taxServiceAdapter, "TaxServiceAdapter", "Adapter", "Connects to the external third-party tax service for live calculations")
  Component(taxRateCache, "TaxRateCache", "Adapter", "Connects to Redis to cache tax rates, providing a fallback mechanism")
  
  Component(eventPublisher, "TaxEventPublisher", "Event Dispatcher", "Publishes events like tax-transaction-finalized")
  Component(auditLogger, "AuditLogger", "Telemetry", "Records a detailed audit trail for all calculations and reports")
}

' External Dependencies
ContainerDb(sqlDb, "Operational Database", "Azure Database for PostgreSQL", "Tax schema")
Container(cache, "Redis Cache", "Azure Cache for Redis", "Caches tax rates by jurisdiction")
Container(bus, "In-Process Event Bus", "MediatR / Rebus", "Handles communication with other internal modules")
System_Ext(orderModule, "Order Module", "Requests tax calculations during checkout")
System_Ext(taxService, "External Tax Service", "Provides real-time tax rates (e.g., Avalara, TaxJar)")
System_Ext(observability, "Observability Stack", "Logs, metrics, alerts")

' Relationships

' Actors -> System
Rel(accountant, taxController, "Run and manage tax reports")
Rel(owner, taxController, "View reports and approve filings")

' Primary synchronous flow: Order Module requests a tax calculation
Rel(orderModule, taxController, "Request tax calculation for order", "API")
Rel(taxController, taxAppService, "Execute calculation workflow")
Rel(taxAppService, taxCalculator, "Calculate tax")
Rel(taxCalculator, exemptionService, "Check for customer exemptions")
Rel(taxCalculator, hazmatFeeService, "Check for hazmat fees")
Rel(taxCalculator, taxServiceAdapter, "Get live tax rates")
Rel(taxCalculator, taxRateCache, "Use cached rates as fallback")
Rel(taxServiceAdapter, taxService, "Call external tax API")
Rel(taxRateCache, cache, "Read/write tax rates")

' Asynchronous flow: Finalize transaction on order shipment
Rel(taxEventHandler, bus, "Subscribes to orders.order-shipped")
Rel(taxEventHandler, taxAppService, "Finalize tax transaction")

' Application Service -> Persistence & Events
Rel(taxAppService, taxTransactionAggregate, "Create and finalize tax transactions")
Rel(taxTransactionAggregate, taxRepository, "Persist state")
Rel(taxRepository, sqlDb, "Read/write data")
Rel(taxReadModel, sqlDb, "Read projections")
Rel(taxAppService, taxReadModel, "Query reports")

' Reporting Flow
Rel(taxAppService, reportingService, "Generate filing reports")

' Events & Telemetry
Rel(taxTransactionAggregate, eventPublisher, "Emit domain events")
Rel(eventPublisher, bus, "Publish events")
Rel(taxAppService, auditLogger, "Record audit trail")
Rel(auditLogger, observability, "Forward logs")

@enduml
