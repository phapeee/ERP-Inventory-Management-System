@startuml PineConePro_ERPIMS_C3_ReturnsModule
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

Person(csr, "Customer Service Rep", "Initiates RMAs, communicates status")
Person(returnsTech, "Returns Technician", "Inspects items, determines disposition")
Person(accountant, "Accountant", "Approves refunds, reconciles credits")

Container_Boundary(rmaBoundary, "Returns & RMA Module") {
  Component(rmaController, "RmaController", "ASP.NET Core", "REST endpoints for RMA intake, status updates, refund processing")
  Component(rmaAppService, "RmaApplicationService", "Application layer", "Coordinates RMA workflows, validations, notifications")
  Component(rmaValidator, "RmaValidator", "FluentValidation", "Checks eligibility, warranty, serial/lot requirements")
  Component(rmaPolicy, "Disposition Policy Engine", "Rules engine", "Determines inspection steps, restock vs refurbish vs scrap")
  Component(rmaAggregate, "Rma Aggregate", "Domain model", "Tracks RMA state, line items, disposition, refund decisions")
  Component(inspectionWorkflow, "Inspection Workflow", "Domain service", "Guides technicians through checks, captures photos/notes")
  Component(refundService, "RefundService", "Adapter", "Initiates refunds/credits through payment gateway/accounting")
  Component(rmaRepository, "RmaRepository", "EF Core repository", "Persists RMAs, inspection results, refund info")
  Component(rmaReadModel, "RmaReadModel", "CQRS read store", "Provides dashboards for status, SLA, root-cause analysis")
  Component(eventPublisher, "RmaEventPublisher", "Event dispatcher", "Emits rma-created, rma-inspected, refund-issued")
  Component(notificationService, "RmaNotificationService", "Background worker", "Sends status emails/SMS to customers & stakeholders")
  Component(analyticsEmitter, "ReturnsMetricsEmitter", "Telemetry", "Publishes KPIs: returns rate, scrap rate, refund cycle time")
  Component(integrationGateway, "Integration Facades", "Adapters", "Interfaces with Orders, Inventory, Shipping, Accounting systems")
  Component(evidenceManager, "Evidence Manager", "Storage client", "Stores photos, inspection reports, customer communication")
}

ContainerDb(sqlDb, "Operational Database", "Azure SQL", "RMA schema")
Container(blob, "Document Store", "Azure Blob Storage", "Inspection photos, reports, correspondence")
Container(queue, "Azure Service Bus", "Topics/Queues", "Return events, notifications")
System_Ext(orderModule, "Order Module", "Provides original order details, shipping status")
System_Ext(inventoryModule, "Inventory Module", "Updates stock for restock or scrap, manages quarantined bins")
System_Ext(shippingModule, "Shipping Module", "Generates return labels, tracks inbound shipments")
System_Ext(paymentGateway, "Payment Gateway", "Processes refunds when approved")
System_Ext(accountingModule, "Accounting Module", "Posts credit memos, adjustments")
System_Ext(productModule, "Product Module", "Provides product disposition guidelines, hazmat handling")
System_Ext(customerComms, "Customer Notification Service", "Email/SMS templates, omni-channel messaging")
System_Ext(observability, "Observability Stack", "Metrics, logs, alerts")

Rel(csr, rmaController, "Initiate/monitor RMAs")
Rel(returnsTech, rmaController, "Record inspections, dispositions")
Rel(accountant, rmaController, "Approve refunds, reconcile")

Rel(rmaController, rmaAppService, "Execute workflow")
Rel(rmaAppService, rmaValidator, "Validate request")
Rel(rmaAppService, rmaPolicy, "Decide disposition workflow")
Rel(rmaAppService, inspectionWorkflow, "Guide inspection steps")
Rel(rmaAppService, rmaAggregate, "Update RMA state")
Rel(rmaAggregate, rmaRepository, "Persist state")
Rel(rmaRepository, sqlDb, "Save/load data")
Rel(rmaAppService, rmaReadModel, "Query status dashboards")
Rel(rmaReadModel, sqlDb, "Read projections")
Rel(rmaAppService, evidenceManager, "Store photos, documents")
Rel(evidenceManager, blob, "Persist evidence")
Rel(rmaAppService, refundService, "Initiate refunds/credits")
Rel(refundService, paymentGateway, "Submit refund/capture/reversal")
Rel(refundService, accountingModule, "Post credit memo/journal")
Rel(rmaAppService, integrationGateway, "Inform dependent modules")
Rel(integrationGateway, orderModule, "Update order status, history")
Rel(integrationGateway, inventoryModule, "Restock, quarantine, scrap")
Rel(integrationGateway, shippingModule, "Generate return labels, track inbound")
Rel(integrationGateway, productModule, "Fetch handling guidelines")
Rel(eventPublisher, queue, "Publish RMA events")
Rel(rmaAggregate, eventPublisher, "Emit domain events")
Rel(queue, inventoryModule, "Trigger inventory adjustments")
Rel(queue, orderModule, "Notify order status changes")
Rel(queue, customerComms, "Trigger customer notifications")
Rel(notificationService, queue, "Consume events, send communications")
Rel(notificationService, customerComms, "Deliver email/SMS")
Rel(rmaAppService, analyticsEmitter, "Emit KPI metrics")
Rel(analyticsEmitter, observability, "Publish dashboards, alerts")
Rel(rmaController, observability, "Telemetry, audit logs")
Rel(integrationGateway, observability, "Integration health metrics")

@enduml
