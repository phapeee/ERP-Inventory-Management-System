@startuml PineConePro_ERPIMS_C4_AnalyticsModule
!include ../C4_Code.puml

LAYOUT_WITH_LEGEND()

Boundary(api, "API Layer") {
  Code(analyticsController, "AnalyticsController", "ASP.NET Core Controller", "Serves persona-based dashboards and metrics.")
  Code(reportController, "ReportController", "ASP.NET Core Controller", "Manages ad-hoc report generation and download.")
  Code(alertController, "AlertController", "ASP.NET Core Controller", "APIs for CRUD operations on alert rules.")
}

Boundary(app, "Application Layer") {
  Code(analyticsAppService, "AnalyticsApplicationService", "Service", "Orchestrates fetching data for dashboards and reports.")
  Code(alertAppService, "AlertApplicationService", "Service", "Manages the configuration of alert rules.")
  
  ' ELT Pipeline (Application Services)
  Code(eventsHandler, "OperationalEventsHandler", "Event Subscriber", "(E/L) Subscribes to domain events and loads raw data into staging tables.")
  Code(transformService, "TransformationService", "Background Service", "(T) Periodically transforms staged data into aggregated, query-optimized models.")
  Code(alertingService, "AlertingService", "Background Service", "Checks alert rules against aggregated data and triggers notifications.")
}

Boundary(domain, "Domain Layer") {
  ' Note: The Analytics module is light on complex domain aggregates. Its primary entities are for configuration.
  Code(alertRule, "AlertRuleAggregate", "DDD Aggregate", "Represents an alert rule with its metric, threshold, and notification settings.")
  Code(dashboardConfig, "DashboardConfig", "Entity", "Defines the layout and widgets for a user or role-based dashboard.")
  Code(reportDefinition, "ReportDefinition", "Entity", "Stores the query and parameters for a saved ad-hoc report.")
}

Boundary(infra, "Infrastructure & Integration") {
  Code(configRepository, "ConfigurationRepository", "EF Core Repository", "Persists AlertRule, DashboardConfig, and ReportDefinition entities.")
  Code(reportingStore, "ReportingDataStore", "Dapper/EF Core", "Adapter to read/write to the reporting schema (staging & aggregated tables).")
  Code(notificationAdapter, "NotificationAdapter", "Adapter", "Connects to a gateway for sending alerts via Email/SMS.")
  Code(dataExportAdapter, "DataExportAdapter", "Adapter", "Exposes an API for external BI tools to extract aggregated data.")
  Code(auditLogger, "AuditLogger", "Logger", "Records all triggered alerts and generated reports for auditing.")
}

' API to Application Flow
Rel(analyticsController, analyticsAppService, "Requests dashboard/metric data")
Rel(reportController, analyticsAppService, "Initiates ad-hoc report generation")
Rel(alertController, alertAppService, "Manages alert rule definitions")

' Application to Domain/Infrastructure Flow
Rel(analyticsAppService, reportingStore, "Queries aggregated models for dashboards/reports")
Rel(alertAppService, configRepository, "Saves and retrieves AlertRule aggregates")
Rel(alertAppService, alertRule, "Manages the lifecycle of")

' ELT Pipeline Flow
Rel(eventsHandler, reportingStore, "(Load) Writes raw event data to staging tables")
Rel(transformService, reportingStore, "(Transform) Reads from staging tables and writes to aggregated models")

' Alerting Flow
Rel(alertingService, configRepository, "Loads active alert rules")
Rel(alertingService, reportingStore, "Queries aggregated models to check rule conditions")
Rel(alertingService, notificationAdapter, "Sends notification if threshold is breached")
Rel(alertingService, auditLogger, "Logs the triggered alert")

' External BI Integration
Rel(analyticsController, dataExportAdapter, "Exposes data through")

@enduml