@startuml PineConePro_ERPIMS_C4_ReturnsModule
!include ../C4_Code.puml

LAYOUT_WITH_LEGEND()

Boundary(rmaApi, "API Layer") {
  Code(rmaController, "RmaController", "ASP.NET Core Controller", "Create RMAs, update inspection notes, track status.")
  Code(rmaStatusController, "RmaStatusController", "ASP.NET Core Controller", "Public tracking endpoint for customers.")
}

Boundary(rmaApp, "Application Layer") {
  Code(rmaAppService, "RmaApplicationService", "Service", "Coordinates RMA lifecycle, inspection, disposition, notifications.")
  Code(inspectionHandler, "InspectionWorkflowHandler", "Workflow", "Guides technicians through inspection steps, records results.")
  Code(dispositionHandler, "DispositionDecisionHandler", "Workflow", "Applies restock/refurbish/scrap rules and required approvals.")
  Code(refundHandler, "RefundWorkflowHandler", "Workflow", "Initiates refunds, accounting entries, monitors completion.")
  Code(rmaValidator, "RmaValidator", "FluentValidation", "Ensures eligibility, warranty, serial matches, hazmat requirements.")
  Code(communicationScheduler, "CommunicationScheduler", "Workflow", "Schedules acknowledgment, inspection complete, refund notifications.")
}

Boundary(rmaDomain, "Domain Layer") {
  Code(rmaAggregate, "RmaAggregate", "DDD Aggregate", "Tracks RMA state, line items, inspection outcomes, refunds.")
  Code(inspectionRecord, "InspectionRecord", "Entity", "Captures condition, photos, technician notes.")
  Code(dispositionPolicy, "DispositionPolicy", "Domain Policy", "Selects restock/refurbish/scrap with reason codes & approvals.")
  Code(refundPolicy, "RefundPolicy", "Domain Policy", "Determines refund route (gateway vs store credit) & approvals.")
  Code(rmaEvents, "RmaDomainEvents", "Event Definitions", "rma-created, rma-inspected, refund-issued, rma-closed.")
}

Boundary(rmaInfra, "Infrastructure & Integration") {
  Code(rmaRepository, "RmaRepository", "EF Core Repository", "Persists RMA aggregates, inspection records, refund info.")
  Code(rmaReadProjector, "RmaReadProjector", "Projection", "Builds dashboards for CSRs, SLA metrics, reason codes.")
  Code(refundGateway, "RefundGateway", "Adapter", "Integrates with payment provider or accounting for credits.")
  Code(inventoryClient, "InventoryAdjustmentClient", "Adapter", "Triggers restock, quarantine, scrap operations.")
  Code(orderClient, "OrderHistoryClient", "Adapter", "Updates order timeline, stops fulfillment when necessary.")
  Code(shippingClient, "ReturnShippingClient", "Adapter", "Requests return labels, inbound tracking.")
  Code(accountingPublisher, "AccountingPublisher", "Integration Publisher", "Posts credit memos, adjustments to accounting module.")
  Code(notificationPublisher, "NotificationPublisher", "Integration Publisher", "Sends messages to email/SMS/portal.")
  Code(evidenceStore, "EvidenceStore", "Blob Client", "Stores inspection photos, docs, correspondences.")
  Code(rmaEventPublisher, "RmaEventPublisher", "Event Dispatcher", "Publishes RMA domain events to Service Bus.")
  Code(rmaCache, "RmaCache", "Redis Cache", "Caches active RMAs for CSR lookup, SLA timers.")
}

Rel(rmaController, rmaAppService, "Invokes")
Rel(rmaStatusController, rmaReadProjector, "Reads public view")
Rel(rmaAppService, rmaValidator, "Validates")
Rel(rmaAppService, inspectionHandler, "Drives inspection")
Rel(rmaAppService, dispositionHandler, "Requests decision")
Rel(rmaAppService, refundHandler, "Triggers refund workflow")
Rel(inspectionHandler, inspectionRecord, "Creates/updates")
Rel(dispositionHandler, dispositionPolicy, "Consults")
Rel(refundHandler, refundPolicy, "Consults")
Rel(rmaAggregate, rmaRepository, "Persist")
Rel(inspectionRecord, rmaRepository, "Persist")
Rel(rmaRepository, rmaCache, "Refresh cache")
Rel(rmaRepository, rmaReadProjector, "Trigger projection")
Rel(rmaReadProjector, rmaCache, "Warm data")
Rel(refundHandler, refundGateway, "Issue refund/credit")
Rel(refundGateway, accountingPublisher, "Post credit memo")
Rel(dispositionHandler, inventoryClient, "Adjust stock")
Rel(inspectionHandler, evidenceStore, "Upload photos")
Rel(rmaAppService, orderClient, "Update order history")
Rel(rmaAppService, shippingClient, "Generate return label")
Rel(refundHandler, notificationPublisher, "Notify customer")
Rel(communicationScheduler, notificationPublisher, "Schedule notifications")
Rel(rmaAggregate, rmaEvents, "Emit events")
Rel(rmaEvents, rmaEventPublisher, "Dispatch")
Rel(notificationPublisher, rmaCache, "Invalidate cached view")

@enduml
