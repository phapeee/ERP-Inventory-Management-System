@startuml PineConePro_ERPIMS_C4_OrderModule
!include ../C4_Code.puml

LAYOUT_WITH_LEGEND()

Component(inProcessEventBus, "In-Process Event Bus", "MediatR or similar", "Decouples modules by publishing/subscribing to domain events.")

' Boundaries for layers inside the module
Boundary(orderApi, "API Layer") {
  Code(orderController, "OrderController", "ASP.NET Core Controller", "Receives REST requests for order lifecycle (create, cancel, status).")
  Code(rmaController, "RmaController", "ASP.NET Core Controller", "Entry point for returns workflows and customer interactions.")
}

Boundary(orderApp, "Application Layer") {
  Code(orderAppService, "OrderApplicationService", "Service", "Coordinates validation, domain commands, and initiates sagas.")
  Code(rmaAppService, "RmaApplicationService", "Service", "Manages RMA workflows, inspections, and refund sagas.")
  Code(orderValidator, "OrderValidator", "FluentValidation", "Validates incoming order DTOs, credit limits, channel rules.")
  Code(rmaValidator, "RmaValidator", "FluentValidation", "Validates eligibility, warranty, serial/lot requirements.")
  Code(fulfillmentSaga, "FulfillmentSagaHandler", "Saga Handler", "Orchestrates async fulfillment by publishing commands and reacting to events (e.g., StockReserved, PaymentCaptured).")
  Code(refundSaga, "RefundSagaHandler", "Saga Handler", "Coordinates refund process by publishing commands and reacting to events (e.g., RefundProcessed, InventoryRestocked).")
  Code(inventoryEventHandler, "InventoryEventHandler", "Event Handler", "Subscribes to events from the Inventory module (e.g., StockReserved) to advance the fulfillment saga.")
  Code(shippingEventHandler, "ShippingEventHandler", "Event Handler", "Subscribes to events from the Shipping module (e.g., OrderShipped) to update order status.")
}

Boundary(orderDomain, "Domain Layer") {
  Code(orderAggregate, "OrderAggregate", "DDD Aggregate", "Encapsulates order state transitions, line items, SLA tracking.")
  Code(rmaAggregate, "RmaAggregate", "DDD Aggregate", "Tracks return state, disposition, refund decisions.")
  Code(allocationPolicy, "AllocationPolicy", "Domain Policy", "Determines reserve/backorder logic based on available stock.")
  Code(paymentPolicy, "PaymentPolicy", "Domain Policy", "Selects auth/capture strategy and triggers fraud screening.")
  Code(rmaPolicy, "DispositionPolicy", "Domain Policy", "Applies restock/refurbish/scrap decisions based on inspection.")
  Code(orderEvents, "OrderDomainEvents", "Event Definitions", "Domain events: OrderCreated, OrderPlacedOnHold, OrderFulfilled, etc.")
}

Boundary(orderInfra, "Infrastructure & Integration") {
  Code(orderRepository, "OrderRepository", "EF Core Repository", "Persists aggregates to Azure Database for PostgreSQL.")
  Code(orderReadModel, "OrderReadModelProjector", "Projection Handler", "Builds denormalized views for order status dashboards.")
  Code(paymentAdapter, "PaymentGatewayAdapter", "Adapter", "Wraps payment provider SDK for auth/capture/refund.")
  Code(fraudAdapter, "FraudScreeningAdapter", "Adapter", "Connects to an external fraud detection service.")
  Code(notificationAdapter, "NotificationAdapter", "Adapter", "Sends customer notifications (email/SMS) via an external service.")
  Code(domainEventPublisher, "DomainEventPublisher", "Event Dispatcher", "Publishes domain events from aggregates to the in-process event bus.")
  Code(commandPublisher, "CommandPublisher", "Command Dispatcher", "Publishes commands (e.g., ReserveStock, ProcessPayment) to the in-process event bus.")
  Code(orderCache, "OrderCache", "Redis Cache", "Caches hot orders for CSRs and SLA checks.")
}

' API to Application
Rel(orderController, orderAppService, "Invokes")
Rel(rmaController, rmaAppService, "Invokes")

' Application Layer Logic
Rel(orderAppService, orderValidator, "Validates")
Rel(rmaAppService, rmaValidator, "Validates")
Rel(orderAppService, orderAggregate, "Loads & executes commands on")
Rel(rmaAppService, rmaAggregate, "Loads & executes commands on")
Rel(orderAppService, fulfillmentSaga, "Starts saga")
Rel(rmaAppService, refundSaga, "Starts saga")

' Domain Logic & Policies
Rel(orderAggregate, allocationPolicy, "Consults")
Rel(orderAggregate, paymentPolicy, "Consults")
Rel(rmaAggregate, rmaPolicy, "Consults")
Rel(paymentPolicy, fraudAdapter, "Requests fraud score from", "Interface")

' Persistence
Rel(orderAggregate, orderRepository, "Is persisted by")
Rel(rmaAggregate, orderRepository, "Is persisted by")
Rel(orderRepository, orderCache, "Updates cache for")
Rel(orderAppService, orderReadModel, "Updates projections via events")
Rel(orderReadModel, orderCache, "Warms cache for")

' Event & Command Publishing
Rel(orderAggregate, orderEvents, "Emits")
Rel(rmaAggregate, orderEvents, "Emits")
Rel(orderEvents, domainEventPublisher, "Are dispatched by")
Rel(domainEventPublisher, inProcessEventBus, "Publishes events to")
Rel(fulfillmentSaga, commandPublisher, "Publishes commands via")
Rel(refundSaga, commandPublisher, "Publishes commands via")
Rel(commandPublisher, inProcessEventBus, "Publishes commands to")

' Event Subscriptions & Sagas
Rel(inProcessEventBus, fulfillmentSaga, "Delivers events to")
Rel(inProcessEventBus, refundSaga, "Delivers events to")
Rel(inProcessEventBus, inventoryEventHandler, "Delivers Inventory events to")
Rel(inProcessEventBus, shippingEventHandler, "Delivers Shipping events to")
Rel(inventoryEventHandler, fulfillmentSaga, "Advances")
Rel(shippingEventHandler, fulfillmentSaga, "Advances")

' External Integrations
Rel(fulfillmentSaga, paymentAdapter, "Executes payment commands on", "Interface")
Rel(refundSaga, paymentAdapter, "Executes refund commands on", "Interface")
Rel(inProcessEventBus, notificationAdapter, "Triggers notifications from events")

@enduml