@startuml PineConePro_ERPIMS_C4_CustomerService
!include ../C4_Code.puml

LAYOUT_WITH_LEGEND()

Boundary(csApi, "API Layer") {
  Code(customerServiceController, "CustomerServiceController", "ASP.NET Core Controller", "Manage tickets, notes, SLA timers, communications.")
}

Boundary(csApp, "Application Layer") {
  Code(csAppService, "CustomerServiceApplicationService", "Service", "Aggregates context, orchestrates ticket workflows, notifications.")
  Code(ticketWorkflowHandler, "TicketWorkflowHandler", "Workflow", "Handles status changes, escalations, SLA timers.")
  Code(contextAssembler, "ContextAssembler", "Service", "Fetches data from orders, returns, promotions, shipping.")
  Code(slaEvaluator, "SlaEvaluator", "Domain Policy", "Calculates timers, breach thresholds.")
  Code(notificationScheduler, "NotificationScheduler", "Workflow", "Schedules acknowledgements, reminders, follow-ups.")
  Code(csValidator, "CustomerServiceValidator", "FluentValidation", "Validates ticket inputs, required fields, attachments.")
}

Boundary(csDomain, "Domain Layer") {
  Code(ticketAggregate, "TicketAggregate", "DDD Aggregate", "Represents customer ticket lifecycle, interactions, assignments.")
  Code(interactionLog, "InteractionLog", "Entity", "Stores communications, notes, attachments.")
  Code(slaMetric, "SlaMetric", "Value Object", "Captures response/resolution targets and actuals.")
  Code(csEvents, "CustomerServiceEvents", "Event Definitions", "case-created, case-updated, case-resolved, sla-breached.")
}

Boundary(csInfra, "Infrastructure & Integration") {
  Code(csRepository, "CustomerServiceRepository", "EF Core Repository", "Persists tickets, interactions, SLA metrics.")
  Code(readModelProjector, "CustomerServiceReadModelProjector", "Projection", "Builds CSR dashboards, queues, metrics.")
  Code(cacheFacade, "CustomerServiceCache", "Redis Cache", "Caches ticket queues, SLA timers.")
  Code(notificationClient, "NotificationClient", "Adapter", "Routes emails/SMS/chat messages.")
  Code(observabilityEmitter, "SlaMetricsEmitter", "Integration Publisher", "Publishes SLA metrics to analytics/observability.")
  Code(eventPublisher, "CustomerServiceEventPublisher", "Event Dispatcher", "Dispatches events to Service Bus.")
  Code(fileStorageClient, "EvidenceStorageClient", "Blob Client", "Stores attachments, transcripts.")
}

Rel(customerServiceController, csAppService, "Invokes")
Rel(csAppService, csValidator, "Validates")
Rel(csAppService, ticketWorkflowHandler, "Advance workflow")
Rel(ticketWorkflowHandler, slaEvaluator, "Evaluate timers")
Rel(ticketWorkflowHandler, eventPublisher, "Emit events")
Rel(csAppService, contextAssembler, "Fetch context")
Rel(contextAssembler, orderModule, "Get orders")
Rel(contextAssembler, returnsModule, "Get RMAs")
Rel(contextAssembler, promotionModule, "Get promotions")
Rel(contextAssembler, shippingModule, "Get shipment status")
Rel(csAppService, notificationScheduler, "Schedule notifications")
Rel(notificationScheduler, notificationClient, "Send messages")
Rel(csAppService, ticketAggregate, "Mutate ticket")
Rel(ticketAggregate, csRepository, "Persist")
Rel(interactionLog, csRepository, "Persist")
Rel(csRepository, readModelProjector, "Trigger projections")
Rel(readModelProjector, cacheFacade, "Warm queues")
Rel(csAppService, fileStorageClient, "Store attachments")
Rel(ticketAggregate, csEvents, "Emit events")
Rel(csEvents, eventPublisher, "Dispatch")
Rel(observabilityEmitter, eventPublisher, "Publish SLA metrics")
Rel(eventPublisher, analyticsModule, "Forward metrics")

@enduml
