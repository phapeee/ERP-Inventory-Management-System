@startuml PineConePro_ERPIMS_C4_ProductModule_Clean
!include ../C4_Code.puml

LAYOUT_WITH_LEGEND()

' External Systems
System_Ext(browser, "Browser", "Angular SPA")
System_Ext(database, "Database", "PostgreSQL")
System_Ext(bus, "In-Process Event Bus", "MediatR/Rebus")
System_Ext(blobStorage, "Blob Storage", "Azure Blob Storage")

' Clean Architecture Layers

Boundary(presentation, "Presentation Layer") {
    Code(productController, "ProductController", "ASP.NET Core Controller", "Receives HTTP requests and invokes the application service.")
}

Boundary(application, "Application Layer") {
    ' Application Service
    Code(productAppService, "ProductApplicationService", "Service", "Implements IProductApplicationService. Orchestrates the use case, calling domain and repository interfaces.")
    
    ' Interfaces (Ports)
    Interface(iProductAppService, "IProductApplicationService", "C# Interface", "Defines the contract for product use cases (e.g., CreateProduct).")
    Interface(iProductRepository, "IProductRepository", "C# Interface", "Defines the contract for persisting and retrieving Product aggregates.")
    Interface(iEventPublisher, "IEventPublisher", "C# Interface", "Defines the contract for dispatching domain events.")
    Interface(iAssetStorage, "IAssetStorage", "C# Interface", "Defines the contract for storing file assets.")

    ' Event Handlers
    Code(productCreatedHandler, "ProductCreatedEventHandler", "Handler", "Listens for ProductCreated events to trigger side effects like updating read models.")
}

Boundary(domain, "Domain Layer") {
    ' Aggregates & Entities
    Code(productAggregate, "Product", "DDD Aggregate Root", "Encapsulates product state and business rules. Raises domain events.")
    Code(kitEntity, "KitComponent", "DDD Entity", "A component within the Product aggregate for kits/bundles.")
    
    ' Value Objects
    Code(priceVO, "Price", "Value Object", "Represents product price.")
    Code(dimensionsVO, "Dimensions", "Value Object", "Represents product dimensions and weight.")

    ' Domain Services & Policies
    Code(hazmatPolicy, "HazmatCompliancePolicy", "Domain Policy", "Contains rules for validating hazardous material compliance.")

    ' Domain Events
    Code(productCreatedEvent, "ProductCreated", "Domain Event", "Represents the fact that a new product was created.")
}

Boundary(infrastructure, "Infrastructure Layer") {
    ' Repository Implementation (Adapter)
    Code(productRepository, "ProductRepository", "EF Core Implementation", "Implements IProductRepository. Handles data access to the PostgreSQL database.")
    
    ' Event Publisher Implementation (Adapter)
    Code(eventPublisher, "EventPublisher", "MediatR Publisher", "Implements IEventPublisher. Dispatches events to the in-process event bus.")

    ' Asset Storage Implementation (Adapter)
    Code(assetStorage, "AssetStorageClient", "Azure SDK Client", "Implements IAssetStorage. Interacts with Azure Blob Storage.")

    ' Read Model Projector
    Code(catalogProjector, "CatalogReadProjector", "Projection Handler", "Builds and updates a denormalized read model for fast queries.")
}


' === Relationships ===

' --- Primary Use Case Flow (e.g., Create Product) ---
Rel(browser, productController, "1. POST /api/v1/products", "HTTPS")
Rel(productController, iProductAppService, "2. Calls CreateProduct(dto)")
Rel_Back(productAppService, iProductAppService, "Implements")

Rel(productAppService, productAggregate, "3. Creates Aggregate instance")
Rel(productAggregate, hazmatPolicy, "4. Uses policy to validate data")
Rel(productAggregate, productCreatedEvent, "5. Raises ProductCreated event")
Rel(productAppService, iProductRepository, "6. Calls Add(product)")
Rel(productAppService, iEventPublisher, "7. Calls Dispatch(events)")


' --- Dependency Inversion (Application -> Infrastructure) ---
Rel_Back(productRepository, iProductRepository, "Implements")
Rel_Back(eventPublisher, iEventPublisher, "Implements")
Rel_Back(assetStorage, iAssetStorage, "Implements")


' --- Infrastructure Implementation Details ---
Rel(productRepository, database, "Reads/writes using EF Core", "SQL")
Rel(eventPublisher, bus, "Publishes to bus", "In-Process")
Rel(assetStorage, blobStorage, "Uploads/downloads files", "HTTPS")


' --- Event Handling / CQRS Flow ---
Rel(bus, productCreatedHandler, "Dispatches event to handler")
Rel(productCreatedHandler, catalogProjector, "Invokes projector")
Rel(catalogProjector, database, "Writes to denormalized read model", "SQL")

@enduml
