name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  backend:
    name: Backend (.NET)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: erp_ci
          POSTGRES_PASSWORD: secret
          POSTGRES_DB: erp_ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U erp_ci -d erp_ci"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    defaults:
      run:
        working-directory: ERP_backend
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DB_CONNECTION_STRING: Host=localhost;Port=5432;Database=erp_ci;Username=erp_ci;Password=secret;Ssl Mode=Disable
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          include-prerelease: true

      - name: Install dotnet-ef tool
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('ERP_backend/**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ERP-Inventory-Management-System.sln

      - name: Apply EF Core migrations
        run: dotnet ef database update --project ERP_ASP_dotnet/ERP_backend.csproj --startup-project ERP_ASP_dotnet/ERP_backend.csproj

      - name: Build
        run: dotnet build ERP-Inventory-Management-System.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test ERP-Inventory-Management-System.sln --configuration Release --no-build --verbosity normal

  frontend:
    name: Frontend (Angular)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ERP_frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: ERP_frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Build
        run: npm run build

  api-tests:
    name: API Tests (Postman)
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Newman
        run: npm install --global newman

      - name: Verify Postman inputs
        shell: bash
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_TEST_COLLECTION_URL: ${{ vars.POSTMAN_TEST_COLLECTION_URL }}
          POSTMAN_TEST_ENV_URL: ${{ vars.POSTMAN_TEST_ENV_URL }}
          POSTMAN_SECRETS: POSTMAN_API_KEY POSTMAN_TEST_COLLECTION_URL POSTMAN_TEST_ENV_URL 
        run: |
          missing=0
          for name in POSTMAN_SECRETS; do
            value="${!name}"
            if [ -z "$value" ]; then
              echo "::error::$name is not configured" >&2
              missing=1
            fi
          done

          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: Run Postman collection
        env:
          POSTMAN_API_KEY: ${{ secrets.POSTMAN_API_KEY }}
          POSTMAN_TEST_COLLECTION_URL: ${{ vars.POSTMAN_TEST_COLLECTION_URL }}
        run: |
          newman run "${POSTMAN_TEST_COLLECTION_URL}?apikey=${POSTMAN_API_KEY}" \
            --environment "${POSTMAN_TEST_ENV_URL}?apikey=${POSTMAN_API_KEY}" \
            --reporters cli,junit \
            --reporter-junit-export newman-report.xml

      - name: Upload Newman report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: newman-report
          path: newman-report.xml
